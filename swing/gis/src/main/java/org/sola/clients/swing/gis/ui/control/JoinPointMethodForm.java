/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import com.vividsolutions.jts.geom.*;
import java.lang.reflect.Method;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.map.extended.layer.ExtendedLayerGraphics;
import org.geotools.swing.extended.Map;
import org.geotools.swing.extended.exception.InitializeLayerException;
import org.opengis.feature.simple.SimpleFeature;
import org.sola.clients.swing.gis.Polygonization;
import org.sola.clients.swing.gis.PublicMethod;
import org.sola.clients.swing.gis.layer.CadastreChangeTargetCadastreObjectLayer;
import org.sola.clients.swing.gis.layer.CadastreTargetSegmentLayer;

/**
 *
 * @author ShresthaKabin
 */
public class JoinPointMethodForm extends javax.swing.JDialog {
    private CadastreTargetSegmentLayer targetPointlayer=null;
    private CadastreChangeTargetCadastreObjectLayer targetParcelsLayer=null;
    //Store selected line and points.
    private LineString lineSeg = null;
    private Point pointFixed=null;
    /**
     * Creates new form JoinPointMethodForm
     */
    public JoinPointMethodForm(CadastreTargetSegmentLayer targetPointlayer,CadastreChangeTargetCadastreObjectLayer targetParcelsLayer) 
                            throws NoSuchMethodException, InitializeLayerException {
        initComponents();
        this.setAlwaysOnTop(true);
        //this.setModalityType(ModalityType.APPLICATION_MODAL);
        locatePointPanel.initializeFormVariable(targetPointlayer);
        
        this.targetPointlayer = targetPointlayer;
        this.targetParcelsLayer=targetParcelsLayer;
    }

    public LocatePointPanel getLocatePointPanel() {
        return locatePointPanel;
    }

    public void showPointListInTable() {
        //Find features.
        SimpleFeatureCollection pointFeatures = targetPointlayer.getFeatureCollection();
        SimpleFeatureIterator feaIterator = pointFeatures.features();
        //get list model copy.
        
        DefaultListModel listFrom = new DefaultListModel();
        listFrom.clear();
        DefaultListModel listTO = new DefaultListModel();
        listTO.clear();
        //add item to list model.
        while (feaIterator.hasNext()) {
            SimpleFeature fea = feaIterator.next();
            Object ptnum = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);

            listFrom.addElement(ptnum);
            listTO.addElement(ptnum);
        }
        //assign the modified list model.
        lstFrom.setModel(listFrom);
        lstFrom.repaint();
        lstTo.setModel(listTO);
        lstTo.repaint();
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstFrom = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTo = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnJoinPoint = new javax.swing.JButton();
        btnPolygonize = new javax.swing.JButton();
        locatePointPanel = new org.sola.clients.swing.gis.ui.control.LocatePointPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstFrom.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstFrom);

        lstTo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstTo);

        jLabel1.setText("From Point");

        jLabel2.setText("To Point");

        btnJoinPoint.setText("Join Points");
        btnJoinPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinPointActionPerformed(evt);
            }
        });

        btnPolygonize.setText("Create Polygon");
        btnPolygonize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPolygonizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnJoinPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPolygonize))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJoinPoint)
                    .addComponent(btnPolygonize))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSegment(Coordinate[] co, ExtendedLayerGraphics targetSegmentLayer) {
        if (co==null)return;
        //Find Features.
        int feacount=1;//already incremented.
        SimpleFeatureCollection segs = targetPointlayer.getSegmentLayer().getFeatureCollection();
        SimpleFeatureIterator segIterator = segs.features();
        while (segIterator.hasNext()){
            feacount++;
            segIterator.next();
        }
        
        GeometryFactory geomFactory= new GeometryFactory();
        LineString seg = geomFactory.createLineString(co);
        
        DecimalFormat df = new DecimalFormat("0.00");
        String sn = Integer.toString(seg.hashCode());
        if (targetSegmentLayer.removeFeature(sn) == null) {
            HashMap<String, Object> fieldsWithValues = new HashMap<String, Object>();
            fieldsWithValues.put(
                    CadastreTargetSegmentLayer.LAYER_FIELD_FID, feacount);
            //format the shape length.
            Double shapelen = seg.getLength();
            String sLen = df.format(shapelen);
            fieldsWithValues.put(
                    CadastreTargetSegmentLayer.LAYER_FIELD_SHAPE_LEN, sLen);
            fieldsWithValues.put(
                    CadastreTargetSegmentLayer.LAYER_FIELD_PARCEL_ID, seg.hashCode());
            fieldsWithValues.put(
                    CadastreTargetSegmentLayer.LAYER_FIELD_SELECTED, 0);

            targetSegmentLayer.addFeature(sn, seg, fieldsWithValues);
        }
    }

    private void btnJoinPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinPointActionPerformed
        Object selectedFromPoint = lstFrom.getSelectedValue();
        Object selectedToPoint = lstTo.getSelectedValue();
        if (selectedFromPoint == null || selectedToPoint == null) {
            return;
        }

        //Find Features.
        SimpleFeatureCollection points = targetPointlayer.getFeatureCollection();
        SimpleFeatureIterator ptIterator = points.features();
        ///find first point.
        Coordinate pt1 = null;
        Coordinate pt2 = null;
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            Object fealable = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);
            if (selectedFromPoint.equals(fealable)) {
                Point pt = (Point) fea.getAttribute(0);//point geometry.
                pt1 = pt.getCoordinate();
                break;
            }
        }
        //find second point.
        ptIterator = points.features();
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            Object fealable = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);
            if (selectedToPoint.equals(fealable)) {
                Point pt = (Point) fea.getAttribute(0);//point geometry.
                pt2 = pt.getCoordinate();
                break;
            }
        }
        if (pt1 == null || pt2 == null) {
            return;
        }
        Coordinate[] co = new Coordinate[]{pt1, pt2};
        addSegment(co,targetPointlayer.getSegmentLayer());
        //repaint the map.
        targetPointlayer.getMapControl().refresh();
    }//GEN-LAST:event_btnJoinPointActionPerformed

    // create new polygon from the segment formed.
    private void btnPolygonizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPolygonizeActionPerformed
        Polygonization.formPolygon(targetPointlayer, targetParcelsLayer);
    }//GEN-LAST:event_btnPolygonizeActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Map mapObj=targetPointlayer.getMapControl();
        PublicMethod.maplayerOnOff(mapObj, true);
    }//GEN-LAST:event_formWindowClosing

    //Invokes this method by btnAddPointActionPerformed event of LocatePointPanel.
    public void refreshTable(Object lineSeg,Object pointFixed, String parID ){
        this.lineSeg=(LineString)lineSeg;
        this.pointFixed=(Point)pointFixed;
        
        showPointListInTable();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Event delegate passing to the child JPanel.
        Class[] cls=new Class[]{Object.class,Object.class,String.class};
        Class joinPointForm=this.getClass();
        Method refresh_this=null;
        try {
            refresh_this = joinPointForm.getMethod("refreshTable", cls);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(JoinPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(JoinPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        locatePointPanel.setClickEvnt(refresh_this,this);
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnJoinPoint;
    private javax.swing.JButton btnPolygonize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.sola.clients.swing.gis.ui.control.LocatePointPanel locatePointPanel;
    private javax.swing.JList lstFrom;
    private javax.swing.JList lstTo;
    // End of variables declaration//GEN-END:variables
}
