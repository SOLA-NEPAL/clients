/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import org.geotools.swing.extended.Map;
import org.sola.clients.beans.referencedata.DistrictBean;
import org.sola.clients.beans.referencedata.VdcBean;
import org.sola.clients.swing.gis.PublicMethod;
import org.sola.clients.swing.gis.layer.CadastreObjectLayer;
import org.sola.clients.swing.gis.layer.ConstructionObjectLayer;
import org.sola.services.boundary.wsclients.WSManager;
import org.sola.webservices.transferobjects.cadastre.MapSheetTO;
/**
 *
 * @author ShresthaKabin
 */
public class MapDisplayOptionForm extends javax.swing.JDialog {
    private Map mapObj=null;
    private CadastreObjectLayer parcelLayer=null;
    private List<String> mapsheets=null;
    private ConstructionObjectLayer consLayer=null;
    /**
     * Creates new form MapDisplayOptionForm
     */
    public MapDisplayOptionForm(Map mapObj,CadastreObjectLayer parcelLayer,
                ConstructionObjectLayer consLayer,List<String> mapsheets) {
        super();
        initComponents();
        this.mapObj=mapObj;
        this.parcelLayer=parcelLayer;
        this.consLayer=consLayer;
        //mapSheetListBean.loadMapSheetList();
        this.mapsheets=mapsheets;
        reLoadItemsInListBox(lstMapSheets, lstMapDisplay);
        districtListBean.loadList(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mapSheetListBean = new org.sola.clients.beans.cadastre.MapSheetListBean();
        districtListBean = new org.sola.clients.beans.referencedata.DistrictListBean();
        vdcListBean = new org.sola.clients.beans.referencedata.VdcListBean();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        btnRemoveALL = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        cmdAppendALL = new javax.swing.JButton();
        cmdAppend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstMapDisplay = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        btnDisplayMap = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboDistrict = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cboVDC = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cboWard = new javax.swing.JComboBox();
        btnMapSheets = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstMapSheets = new javax.swing.JList();
        optGrid = new javax.swing.JRadioButton();
        optFree = new javax.swing.JRadioButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sola/clients/swing/gis/ui/control/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("PropertiesList.jLabel1.text")); // NOI18N

        btnRemoveALL.setText(bundle.getString("PropertiesList.btnRemoveALL.text")); // NOI18N
        btnRemoveALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveALLActionPerformed(evt);
            }
        });

        btnRemove.setText(bundle.getString("PropertiesList.btnRemove.text")); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        cmdAppendALL.setText(bundle.getString("PropertiesList.cmdAppendALL.text")); // NOI18N
        cmdAppendALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAppendALLActionPerformed(evt);
            }
        });

        cmdAppend.setText(bundle.getString("PropertiesList.cmdAppend.text")); // NOI18N
        cmdAppend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAppendActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lstMapDisplay);

        jLabel2.setText(bundle.getString("PropertiesList.jLabel2.text")); // NOI18N

        btnDisplayMap.setText(bundle.getString("PropertiesList.btnDisplayMap.text")); // NOI18N
        btnDisplayMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayMapActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(51, 51, 51));
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("District:");

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${districts}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, districtListBean, eLProperty, cboDistrict);
        bindingGroup.addBinding(jComboBoxBinding);

        cboDistrict.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDistrictItemStateChanged(evt);
            }
        });

        jLabel5.setText("VDC/Municipality:");

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${vdcs}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, vdcListBean, eLProperty, cboVDC);
        bindingGroup.addBinding(jComboBoxBinding);

        cboVDC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboVDCItemStateChanged(evt);
            }
        });

        jLabel6.setText("Ward:");

        btnMapSheets.setText("Select Map sheets of selected Administrative Boundary");
        btnMapSheets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMapSheetsActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(lstMapSheets);

        buttonGroup1.add(optGrid);
        optGrid.setSelected(true);
        optGrid.setText("Control Sheet (Grid Sheet)");

        buttonGroup1.add(optFree);
        optFree.setText("Free Sheet ( without proper co-ordinates)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmdAppendALL)
                                    .addComponent(cmdAppend, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRemoveALL)
                                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(cboWard, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnDisplayMap))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(cboVDC, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(optGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(optFree))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnMapSheets)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cboVDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cboWard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optGrid)
                    .addComponent(optFree))
                .addGap(9, 9, 9)
                .addComponent(btnMapSheets)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmdAppend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdAppendALL)
                        .addGap(292, 292, 292)
                        .addComponent(btnRemoveALL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(btnDisplayMap)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isSelectedIndex(JList source,int i){
        int [] indxs= source.getSelectedIndices();
        for (int j=0;j<indxs.length;j++){
            if (i==indxs[j]) return true;
        }
        
        return false;
    }
    
    private void AppendItemInListBox(JList source,JList dest) {
        //append to destination list box.
        DefaultListModel defDisplay=new DefaultListModel();
        ListModel model=dest.getModel();
        for (int i=0; i<model.getSize();i++){
            defDisplay.addElement(model.getElementAt(i));
        }
        for (Object obj:source.getSelectedValuesList()){
            if (defDisplay.contains(obj)) continue;
            defDisplay.addElement(obj);
        }
        dest.setModel(defDisplay);
        //remove from source list box.
        DefaultListModel srcMaps=new DefaultListModel();
        ListModel src_model=source.getModel();
        for (int i=0; i<src_model.getSize();i++){
            if (isSelectedIndex(source, i)) continue;
            srcMaps.addElement(src_model.getElementAt(i));
        }
        source.setModel(srcMaps);
    }
    
    private boolean isMapSheetAlreadyExist(String mapsheetID){
        for (String mapsheet:mapsheets){
            if (mapsheet.equals(mapsheetID)){
                return true;
            }
        }
        return false;
    }
    
    private void reLoadItemsInListBox(JList source,JList dest) {
        //append to destination list box.
        DefaultListModel defDisplay=new DefaultListModel();
        ListModel model=dest.getModel();
        for (int i=0; i<model.getSize();i++){
            defDisplay.addElement(model.getElementAt(i));
        }
        
        DefaultListModel srcMaps=new DefaultListModel();
        ListModel src_model=source.getModel();
        for (int i=0;i<src_model.getSize();i++){
            String mapbeanid=src_model.getElementAt(i).toString();
            if (isMapSheetAlreadyExist(mapbeanid)){
                defDisplay.addElement(mapbeanid);
            }
            else{
                srcMaps.addElement(mapbeanid);
            }
        }
        dest.setModel(defDisplay);
        source.setModel(srcMaps);
    }
    
    private void btnRemoveALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveALLActionPerformed
        AppendALLItemInListBox(lstMapDisplay, lstMapSheets);
    }//GEN-LAST:event_btnRemoveALLActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        AppendItemInListBox(lstMapDisplay, lstMapSheets);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void cmdAppendALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAppendALLActionPerformed
        AppendALLItemInListBox(lstMapSheets, lstMapDisplay);
    }//GEN-LAST:event_cmdAppendALLActionPerformed

    private void cmdAppendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAppendActionPerformed
        AppendItemInListBox(lstMapSheets, lstMapDisplay);
    }//GEN-LAST:event_cmdAppendActionPerformed

    private void AppendALLItemInListBox(JList source,JList dest) {
        //append to destination list box.
        DefaultListModel defDisplay=new DefaultListModel();
        ListModel model=dest.getModel();
        for (int i=0; i<model.getSize();i++){
            defDisplay.addElement(model.getElementAt(i));
        }
        ListModel srcModel=source.getModel();
        for (int i=0;i<srcModel.getSize();i++){
            Object obj=srcModel.getElementAt(i);
            if (defDisplay.contains(obj)) continue;
            defDisplay.addElement(obj);
        }
        dest.setModel(defDisplay);
        //remove from source list box.
        DefaultListModel srcMaps=new DefaultListModel();
        srcMaps.clear();
        source.setModel(srcMaps);
    }
    
    private void btnDisplayMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayMapActionPerformed
       //parcelLayer.getFeatureCollection().clear();
       List<String> map_sheets=getMapSheets();
       PublicMethod.getParcelData(parcelLayer,map_sheets);
       PublicMethod.getConstructionData(consLayer, map_sheets);
       parcelLayer.getMapControl().refresh();
       this.setVisible(false);
    }//GEN-LAST:event_btnDisplayMapActionPerformed
                                       
   private void filterVdcsFromSelectedDistricts(){
         // TODO add your handling code here:        
        try {
            if (cboDistrict.getSelectedItem() == null) {
                return;
            }

            DistrictBean district = (DistrictBean) cboDistrict.getSelectedItem();
            if (district != null) {
                String districCode = district.getCode();

                vdcListBean.loadList(true, districCode);
                cboVDC.setSelectedIndex(-1);
            }
        } catch (Exception e) {
        }
   }
   
    private void cboDistrictItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDistrictItemStateChanged
        filterVdcsFromSelectedDistricts();
    }//GEN-LAST:event_cboDistrictItemStateChanged

    private void cboVDCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboVDCItemStateChanged
        try {
            if (cboVDC.getSelectedItem() == null) {
                return;
            }

            VdcBean vdc = (VdcBean) cboVDC.getSelectedItem();
            if (vdc != null) {
                String vdccode = vdc.getCode();
                if (vdccode==null || vdccode.isEmpty()) return;
                List<String> wards=
                    WSManager.getInstance().getCadastreService().getWardlist(vdccode);
                DefaultComboBoxModel cbomodel=new DefaultComboBoxModel();
                cbomodel.addElement("");
                for (String ward: wards){
                    cbomodel.addElement(ward);
                }
                cboWard.setModel(cbomodel);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cboVDCItemStateChanged

    private void btnMapSheetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMapSheetsActionPerformed
        VdcBean vdc = (VdcBean) cboVDC.getSelectedItem();
        if (vdc==null) return;
        String wardno=cboWard.getSelectedItem().toString();
        int mapsheettype=0;
        if (optFree.isSelected()) mapsheettype=1;
        List<MapSheetTO> sheets=null;
        if (wardno.trim().isEmpty()){
            sheets=WSManager.getInstance().getCadastreService().loadVDCMapSheet(
                    mapsheettype, vdc.getCode());
        }
        else{
            sheets=WSManager.getInstance().getCadastreService().loadWardMapSheet(
                    mapsheettype, vdc.getCode(),wardno);
        }
        DefaultListModel listmodel= new DefaultListModel();
        for (MapSheetTO mapsheet:sheets){
            listmodel.addElement(mapsheet.getMapNumber());
        }
        lstMapSheets.setModel(listmodel);
    }//GEN-LAST:event_btnMapSheetsActionPerformed

    public List<String> getMapSheets(){
        List<String> map_sheets=new ArrayList<String>();
        ListModel model=lstMapDisplay.getModel();
        for (int i=0; i<model.getSize();i++){
            String sheet=model.getElementAt(i).toString();
            map_sheets.add(sheet);
        }
        
        return map_sheets;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDisplayMap;
    private javax.swing.JButton btnMapSheets;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveALL;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboDistrict;
    private javax.swing.JComboBox cboVDC;
    private javax.swing.JComboBox cboWard;
    private javax.swing.JButton cmdAppend;
    private javax.swing.JButton cmdAppendALL;
    private org.sola.clients.beans.referencedata.DistrictListBean districtListBean;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lstMapDisplay;
    private javax.swing.JList lstMapSheets;
    private org.sola.clients.beans.cadastre.MapSheetListBean mapSheetListBean;
    private javax.swing.JRadioButton optFree;
    private javax.swing.JRadioButton optGrid;
    private org.sola.clients.beans.referencedata.VdcListBean vdcListBean;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
