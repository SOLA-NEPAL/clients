/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import com.vividsolutions.jts.geom.*;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.swing.extended.Map;
import org.geotools.swing.extended.exception.InitializeLayerException;
import org.opengis.feature.simple.SimpleFeature;
import org.sola.clients.swing.gis.Polygonization;
import org.sola.clients.swing.gis.PublicMethod;
import org.sola.clients.swing.gis.layer.CadastreChangeTargetCadastreObjectLayer;
import org.sola.clients.swing.gis.layer.CadastreTargetSegmentLayer;
import org.sola.clients.swing.gis.segmentDetails;

/**
 *
 * @author ShresthaKabin
 */
public class TwoPointMethodForm extends javax.swing.JDialog {
    //Store for old data collection.
    private CadastreChangeTargetCadastreObjectLayer prevTargetParcelsLayer = null;
    
    private CadastreTargetSegmentLayer targetPointlayer=null;
    private CadastreChangeTargetCadastreObjectLayer targetParcelsLayer=null;
    //Store selected line and points.
    private LineString lineSeg = null;
    private Point pointFixed=null;
    
    /**
     * Creates new form JoinPointMethodForm
     */
    public TwoPointMethodForm(CadastreTargetSegmentLayer targetPointlayer,CadastreChangeTargetCadastreObjectLayer targetParcelsLayer) 
                            throws NoSuchMethodException, InitializeLayerException {
        initComponents();
        this.setAlwaysOnTop(true);
        //this.setModalityType(ModalityType.APPLICATION_MODAL);
        this.targetPointlayer = targetPointlayer;
        this.targetParcelsLayer=targetParcelsLayer;
        //initialize data.
        locatePointPanel.initializeFormVariable(targetPointlayer);
    }

    public LocatePointPanel getLocatePointPanel() {
        return locatePointPanel;
    }

    public void showPointListInTable() {
        //Find features.
        SimpleFeatureCollection pointFeatures = targetPointlayer.getFeatureCollection();
        SimpleFeatureIterator feaIterator = pointFeatures.features();
        //get list model copy.
        
        DefaultListModel listFrom = new DefaultListModel();
        listFrom.clear();
        DefaultListModel listTO = new DefaultListModel();
        listTO.clear();
        //add item to list model.
        while (feaIterator.hasNext()) {
            SimpleFeature fea = feaIterator.next();
            Object ptnum = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);

            listFrom.addElement(ptnum);
            listTO.addElement(ptnum);
        }
        //assign the modified list model.
        lstFrom.setModel(listFrom);
        lstFrom.repaint();
        lstTo.setModel(listTO);
        lstTo.repaint();
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstFrom = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTo = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnJoinPoint = new javax.swing.JButton();
        btnPolygonize = new javax.swing.JButton();
        locatePointPanel = new org.sola.clients.swing.gis.ui.control.LocatePointPanel();
        btnUndoSplit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCheckSegments = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstFrom.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstFrom);

        lstTo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstTo);

        jLabel1.setText("From Point");

        jLabel2.setText("To Point");

        btnJoinPoint.setText("Join Points");
        btnJoinPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinPointActionPerformed(evt);
            }
        });

        btnPolygonize.setText("Create Polygons");
        btnPolygonize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPolygonizeActionPerformed(evt);
            }
        });

        btnUndoSplit.setText("Undo Split");
        btnUndoSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoSplitActionPerformed(evt);
            }
        });

        btnSave.setText("Save");

        btnCheckSegments.setText("Check Segments");
        btnCheckSegments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckSegmentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPolygonize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnJoinPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUndoSplit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCheckSegments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnJoinPoint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCheckSegments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUndoSplit)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPolygonize)
                        .addContainerGap())
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addSegment(Coordinate pt1,Coordinate pt2) {
        if (pt1 == null || pt2 == null) {
            return;
        }
        Coordinate[] co = new Coordinate[]{pt1, pt2};

        //Form new line segment.
        GeometryFactory geomFactory= new GeometryFactory();
        LineString seg = geomFactory.createLineString(co);

        locatePointPanel.appendNewSegment(seg);
    }

    private void btnJoinPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinPointActionPerformed
        Object selectedFromPoint = lstFrom.getSelectedValue();
        Object selectedToPoint = lstTo.getSelectedValue();
        if (selectedFromPoint == null || selectedToPoint == null) {
            return;
        }

        //Find Features.
        SimpleFeatureCollection points = targetPointlayer.getFeatureCollection();
        SimpleFeatureIterator ptIterator = points.features();
        ///find first point.
        Coordinate pt1 = null;
        Coordinate pt2 = null;
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            Object fealable = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);
            if (selectedFromPoint.equals(fealable)) {
                Point pt = (Point) fea.getAttribute(0);//point geometry.
                pt1 = pt.getCoordinate();
                break;
            }
        }
        //find second point.
        ptIterator = points.features();
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            Object fealable = fea.getAttribute(CadastreTargetSegmentLayer.POINT_LAYER_FIELD_LABEL);
            if (selectedToPoint.equals(fealable)) {
                Point pt = (Point) fea.getAttribute(0);//point geometry.
                pt2 = pt.getCoordinate();
                break;
            }
        }
        
        addSegment(pt1,pt2);
        //repaint the map.
        targetPointlayer.getMapControl().refresh();
    }//GEN-LAST:event_btnJoinPointActionPerformed

    // create new polygon from the segment formed.
    private void btnPolygonizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPolygonizeActionPerformed
        Polygonization.formPolygon(targetPointlayer, targetParcelsLayer);
    }//GEN-LAST:event_btnPolygonizeActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Map mapObj=targetPointlayer.getMapControl();
        PublicMethod.maplayerOnOff(mapObj, true);
    }//GEN-LAST:event_formWindowClosing

    //Invokes this method by btnAddPointActionPerformed event of LocatePointPanel.
    public void refreshTable(Object lineSeg,Object pointFixed, String parID ){
        this.lineSeg=(LineString)lineSeg;
        this.pointFixed=(Point)pointFixed;
        
        showPointListInTable();
    }
    
    //interchange polygon collection.
    public final void exchangeParcelCollection(CadastreChangeTargetCadastreObjectLayer src_targetParcelsLayer
                            ,CadastreChangeTargetCadastreObjectLayer dest_targetParcelsLayer){
        dest_targetParcelsLayer.getFeatureCollection().clear();
        //get feature collection.
        SimpleFeatureCollection polys=src_targetParcelsLayer.getFeatureCollection();
        SimpleFeatureIterator polyIterator=polys.features();
        while (polyIterator.hasNext()){
            SimpleFeature fea=polyIterator.next();
            Geometry geom=(Geometry)fea.getAttribute(0);//first item as geometry.
            String objId= fea.getID().toString();
            
            dest_targetParcelsLayer.addFeature(objId, geom, null);
        }
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            //Store data for undo action.
            locatePointPanel.resetVariable(targetPointlayer);
            //store data to old collection.
            prevTargetParcelsLayer= new CadastreChangeTargetCadastreObjectLayer();
            exchangeParcelCollection(targetParcelsLayer,prevTargetParcelsLayer);
        } catch (InitializeLayerException ex) {
            Logger.getLogger(OnePointAreaMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Event delegate passing to the child JPanel.
        Class[] cls=new Class[]{Object.class,Object.class,String.class};
        Class joinPointForm=this.getClass();
        Method refresh_this=null;
        try {
            refresh_this = joinPointForm.getMethod("refreshTable", cls);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(TwoPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(TwoPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        locatePointPanel.setClickEvnt(refresh_this,this);
    }//GEN-LAST:event_formWindowOpened

    private void btnUndoSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoSplitActionPerformed
        locatePointPanel.getPreviousData();
        //copy data from old collection to current collection.
        exchangeParcelCollection(prevTargetParcelsLayer, targetParcelsLayer);
        //refresh map.
        targetParcelsLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnUndoSplitActionPerformed

    //for time being and for small number of selected parcels, using brute force method.
    //for big collection of parcels, need to write sweep line method to find out the intersections.
    private Geometry getSegments_Union(){
        //get segment collection.
        List<segmentDetails> segs=locatePointPanel.buildSegmentCollection(targetPointlayer.getSegmentLayer());
        //first segment.
        segmentDetails firstSeg=segs.get(0);
        //form noded line string.
        Geometry nodedLineStrings=(LineString)firstSeg.getGeom();
        for (int i=1;i<segs.size();i++){
            segmentDetails seg=segs.get(i);
            LineString nextLine=(LineString)seg.getGeom();
            nodedLineStrings=nodedLineStrings.union(nextLine);
        }
        
        return nodedLineStrings;
    }
    
    private void append_as_New_Point(Point pt){
        byte selected=0;
        String geom_id=Integer.toString(pt.hashCode());
        //Check existence of old feature.
        SimpleFeature oldpt=targetPointlayer.getFeatureCollection().getFeature(geom_id);
        if (oldpt==null){
            locatePointPanel.addPointInPointCollection(pt,selected);
        } 
    }
    
    private void btnCheckSegmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckSegmentsActionPerformed
        // find intersection points.
        Geometry segsSet= getSegments_Union();
        
        //first clear all the segment and point collection.
        targetPointlayer.getSegmentLayer().getFeatureCollection().clear();
        targetPointlayer.getFeatureCollection().clear();
        //Append all segment as new
        for (int i=0;i<segsSet.getNumGeometries();i++){
            LineString seg=(LineString)segsSet.getGeometryN(i);
            locatePointPanel.appendNewSegment(seg);
            //append point to the point collection.
            append_as_New_Point(seg.getStartPoint());
            append_as_New_Point(seg.getEndPoint());
        }
        System.out.println(targetPointlayer.getFeatureCollection().size());
        //refresh everything including map.
        locatePointPanel.showSegmentListInTable();
        showPointListInTable();
        targetParcelsLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnCheckSegmentsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckSegments;
    private javax.swing.JButton btnJoinPoint;
    private javax.swing.JButton btnPolygonize;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndoSplit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.sola.clients.swing.gis.ui.control.LocatePointPanel locatePointPanel;
    private javax.swing.JList lstFrom;
    private javax.swing.JList lstTo;
    // End of variables declaration//GEN-END:variables
}
