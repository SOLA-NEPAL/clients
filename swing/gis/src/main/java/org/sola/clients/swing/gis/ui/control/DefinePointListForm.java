/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import com.vividsolutions.jts.geom.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.map.extended.layer.ExtendedLayerGraphics;
import org.geotools.swing.extended.Map;
import org.geotools.swing.extended.exception.InitializeLayerException;
import org.opengis.feature.simple.SimpleFeature;
import org.sola.clients.swing.gis.NodedLineStringGenerator;
import org.sola.clients.swing.gis.Polygonization;
import org.sola.clients.swing.gis.PublicMethod;
import org.sola.clients.swing.gis.layer.CadastreChangeTargetCadastreObjectLayer;
import org.sola.clients.swing.gis.layer.CadastreTargetSegmentLayer;

/**
 *
 * @author ShresthaKabin
 */
public class DefinePointListForm extends javax.swing.JDialog {
    //Store for old data collection.
    private CadastreChangeTargetCadastreObjectLayer prevTargetParcelsLayer = null;

    private CadastreTargetSegmentLayer segmentLayer = null;
    private ExtendedLayerGraphics targetSegmentLayer = null;
    private CadastreChangeTargetCadastreObjectLayer targetParcelsLayer = null;
    
    private LocatePointPanel locatePointPanel;
    /**
     * Creates new form DefinePointListForm
     */
    public DefinePointListForm(CadastreTargetSegmentLayer segmentLayer, CadastreChangeTargetCadastreObjectLayer targetParcelsLayer)
                    throws InitializeLayerException {
        initComponents();
        //set table dimesion.
        TableColumnModel cModel= tblPoints.getColumnModel();
        cModel.getColumn(0).setWidth(30);
        tblPoints.setColumnModel(cModel);
        tblPoints.repaint();
        
        otherInitializations(segmentLayer,targetParcelsLayer);
    }

    private void otherInitializations(CadastreTargetSegmentLayer segmentLayer, CadastreChangeTargetCadastreObjectLayer targetParcelsLayer) throws InitializeLayerException {
        this.setTitle("Defining Point List for Parcel Splitting form.");
        this.setAlwaysOnTop(true);
        //Initialize other variables.
        this.segmentLayer = segmentLayer;
        this.targetSegmentLayer = segmentLayer.getSegmentLayer();
        this.targetParcelsLayer = targetParcelsLayer;

        locatePointPanel=new LocatePointPanel(segmentLayer);
        locatePointPanel.reset_OldCollectionVariable(segmentLayer);
        //set parcel id.
        SimpleFeatureCollection feacol=targetParcelsLayer.getFeatureCollection();
        SimpleFeatureIterator feaIter=feacol.features();
        SimpleFeature fea= feaIter.next();
        String parcel_id=fea.getID().toString();
        locatePointPanel.setParcelID(parcel_id);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPoints = new javax.swing.JTable();
        btnImport = new javax.swing.JButton();
        btnSaveTextFile = new javax.swing.JButton();
        btnCheckSegments = new javax.swing.JButton();
        btnCreatePolygon = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnAddRow = new javax.swing.JButton();
        btnUndoSplit = new javax.swing.JButton();
        btnRefreshMap = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tblPoints.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.N.", "X-Cordinate", "Y-Cordinate"
            }
        ));
        tblPoints.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblPoints);
        tblPoints.getColumnModel().getColumn(0).setResizable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        btnImport.setText("Import Text File");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnSaveTextFile.setText("Save to Text File");
        btnSaveTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTextFileActionPerformed(evt);
            }
        });

        btnCheckSegments.setText("Check Segments");
        btnCheckSegments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckSegmentsActionPerformed(evt);
            }
        });

        btnCreatePolygon.setText("Create Polygons");
        btnCreatePolygon.setEnabled(false);
        btnCreatePolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePolygonActionPerformed(evt);
            }
        });

        btnSave.setText("Save");

        btnAddRow.setText("Add Row");
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });

        btnUndoSplit.setText("Undo Split");
        btnUndoSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoSplitActionPerformed(evt);
            }
        });

        btnRefreshMap.setText("Refresh Map");
        btnRefreshMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreatePolygon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCheckSegments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUndoSplit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSaveTextFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefreshMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnAddRow)
                .addGap(30, 30, 30)
                .addComponent(btnImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveTextFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnRefreshMap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUndoSplit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCheckSegments)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreatePolygon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private FileFilter getTextFileFilter() {
        //prepare file filter.
        FileFilter filter=new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory())
                {
                    return true;
                }
                else
                {
                    String filepathname = f.getAbsolutePath().toLowerCase();
                    if (filepathname.endsWith(".csv"))
                        return true;
//                    else if (filepathname.endsWith(".txt"))
//                        return true;
                }
                return false;
            }
            @Override
            public String getDescription() {
               //return "Text Files (*.txt|*.csv)";
                return "Text Files (*.csv)";
            }
        };

        return filter;
    }
    
    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        JFileChooser fileOpen=new JFileChooser();
        fileOpen.setDialogTitle("Choose text file to load in table.");
        fileOpen.setVisible(true);
        FileFilter filter=getTextFileFilter();
        fileOpen.setFileFilter(filter);
        //FileNameExtensionFilter extFilter=new FileNameExtensionFilter("Text Files", "*.txt|*.csv");
        fileOpen.showOpenDialog(this);
        File iFile=fileOpen.getSelectedFile();
        if (iFile==null) return;
        //prepare table to input data.
        DefaultTableModel defTable=(DefaultTableModel)tblPoints.getModel();
        defTable.setRowCount(0);
        tblPoints.setModel(defTable);
        tblPoints.repaint();
        //fill table from text file.
        readTextFileData(iFile);
    }

    private void readTextFileData(File iFile) {
        //fill data into table from text file.
        try {
            DefaultTableModel table=(DefaultTableModel)tblPoints.getModel();
            FileReader iReader=new FileReader(iFile);
            BufferedReader buff_reader=new BufferedReader((Reader)iReader);
            
            String txtline = buff_reader.readLine();
            int i=1;
            DecimalFormat df=new DecimalFormat("0.000");//mm precision.
            while (txtline!=null && !txtline.isEmpty()){
                String[] pt=txtline.split(",");
                if (pt!=null && pt.length>1){
                    Object[] row=new Object[]{i++,
                        df.format(Double.parseDouble(pt[0])),
                             df.format(Double.parseDouble(pt[1]))};
                    table.addRow(row);
                }
                txtline = buff_reader.readLine();
            }
            buff_reader.close();
            tblPoints.setModel(table);
            tblPoints.repaint();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DefinePointListForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
                Logger.getLogger(DefinePointListForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        DefaultTableModel tblmodel=(DefaultTableModel)tblPoints.getModel();
        int rowcount=tblmodel.getRowCount()+1;
        tblmodel.setRowCount(rowcount);
        tblPoints.setModel(tblmodel);
        tblPoints.repaint();
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void saveTextFileData(File oFile) throws IOException{
        boolean isNewFile=oFile.createNewFile();
        if (!isNewFile){
            JOptionPane.showMessageDialog(this, "Could not create the new file.");
            return;
        }
        
        FileWriter oWriter=new FileWriter(oFile);
        BufferedWriter buff_writer=new BufferedWriter((Writer)oWriter);
         
        for (int i=0;i<tblPoints.getRowCount();i++){
            String[] itms=new String[2];
            itms[0]=tblPoints.getValueAt(i, 1).toString();//x-cordinate.
            itms[1]=tblPoints.getValueAt(i, 2).toString();//y-cordinate.
            if (itms[0].trim().isEmpty()) continue;
            
            String txtline=itms[0] + "," + itms[1];
            buff_writer.write(txtline);
            buff_writer.newLine();
        }
        buff_writer.close();
    }
    
    private void btnSaveTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTextFileActionPerformed
        JFileChooser fileSave=new JFileChooser();
        fileSave.setDialogTitle("Give text file name to save table data.");
        fileSave.setVisible(true);
        FileFilter filter=getTextFileFilter();
        fileSave.setFileFilter(filter);
        //FileNameExtensionFilter extFilter=new FileNameExtensionFilter("Text Files", "*.txt|*.csv");
        fileSave.showSaveDialog(this);
        File oFile=fileSave.getSelectedFile();
        if (oFile==null) return;
        try {
            //fill table from text file.
            saveTextFileData(oFile);
        } catch (IOException ex) {
            Logger.getLogger(DefinePointListForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveTextFileActionPerformed

    private void btnCheckSegmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckSegmentsActionPerformed
        GeometryFactory geomFactory=new GeometryFactory();
        //append points into collection.
        for (int i=0;i<tblPoints.getRowCount();i++){
            if (tblPoints.getValueAt(i, 1)==null) continue;
            double x= Double.parseDouble(tblPoints.getValueAt(i, 1).toString());//x-cordinate.
            double y= Double.parseDouble(tblPoints.getValueAt(i, 2).toString());//y-cordinate.
            Coordinate co=new Coordinate(x, y);
            Point pt=geomFactory.createPoint(co);
            locatePointPanel.addPointInPointCollection(pt);
        }
        //append segments into collection.
        double halfLen=0;
        LineString[] segs=new LineString[tblPoints.getRowCount()-1];
        for (int i=0;i<tblPoints.getRowCount()-1;i++){
            if (tblPoints.getValueAt(i, 1)==null || tblPoints.getValueAt(i+1, 1)==null) continue;
            double x= Double.parseDouble(tblPoints.getValueAt(i, 1).toString());//x-cordinate.
            double y= Double.parseDouble(tblPoints.getValueAt(i, 2).toString());//y-cordinate.
            double x1= Double.parseDouble(tblPoints.getValueAt(i+1, 1).toString());//x-cordinate.
            double y1= Double.parseDouble(tblPoints.getValueAt(i+1, 2).toString());//y-cordinate.
            if (x==x1 &&  y==y1) continue;
            Coordinate[] co=new Coordinate[]{new Coordinate(x, y),new Coordinate(x1,y1)};
            segs[i]=geomFactory.createLineString(co);
            halfLen+= segs[i].getLength();
        }
        //find extended segment.
        LineString[] surveyLines=getEndExtended(segs,halfLen);
        byte is_newLine=1;
        for (LineString seg:surveyLines){
            locatePointPanel.appendNewSegment(seg, is_newLine);
        }
        //refresh map.
        targetParcelsLayer.getMapControl().refresh();
        btnCreatePolygon.setEnabled(true);
    }//GEN-LAST:event_btnCheckSegmentsActionPerformed

    private void btnUndoSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoSplitActionPerformed
        locatePointPanel.getPreviousData();
        //copy data from old collection to current collection.
        PublicMethod.exchangeParcelCollection(prevTargetParcelsLayer, targetParcelsLayer);
        btnCreatePolygon.setEnabled(false);
        //refresh map.
        targetParcelsLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnUndoSplitActionPerformed

      //make extended start and end segment to form close figure.
    //it assures the intersection of polygon by offset line.
    private LineString[] getEndExtended(LineString[] surveyLines, double halfLen){
        if (surveyLines==null || surveyLines.length<1) return null;
        GeometryFactory geomFactory=new GeometryFactory();
        //Handle first segment.
        LineString seg1=surveyLines[0];
        Point startpt= PublicMethod.getIntermediatePoint(seg1.getStartPoint(), seg1.getEndPoint(), seg1.getLength(), -halfLen);
        //Handle last segment.
        int n=surveyLines.length-1;
        LineString seg2=surveyLines[n];
        Point endpt= PublicMethod.getIntermediatePoint(seg2.getStartPoint(), seg2.getEndPoint(), seg2.getLength(), halfLen);
        
        if (surveyLines.length>1){
            Coordinate[] co=new Coordinate[]{startpt.getCoordinate(),seg1.getEndPoint().getCoordinate()};
            LineString start_line=geomFactory.createLineString(co);
            surveyLines[0]=start_line;

            co=new Coordinate[]{seg2.getStartPoint().getCoordinate(),endpt.getCoordinate()};
            LineString end_line=geomFactory.createLineString(co);
            surveyLines[n]=end_line;
        }
        else{
            Coordinate[] co=new Coordinate[]{startpt.getCoordinate(),endpt.getCoordinate()};
            surveyLines[0]=geomFactory.createLineString(co);
        }
            
        return surveyLines;
    }
    
    private void btnCreatePolygonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePolygonActionPerformed
        //Generate new line collection.
        NodedLineStringGenerator lineGenerator=new NodedLineStringGenerator(segmentLayer, locatePointPanel);
        lineGenerator.generateNodedSegments();
        
        Polygonization.formPolygon(segmentLayer, targetParcelsLayer);
        btnCreatePolygon.setEnabled(false);
    }//GEN-LAST:event_btnCreatePolygonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
         try {
            //Store data for undo action.
            locatePointPanel.reset_OldCollectionVariable(segmentLayer);
            //store data to old collection.
            prevTargetParcelsLayer= new CadastreChangeTargetCadastreObjectLayer();
            PublicMethod.exchangeParcelCollection(targetParcelsLayer,prevTargetParcelsLayer);
        } catch (InitializeLayerException ex) {
            Logger.getLogger(OnePointAreaMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Map mapObj=segmentLayer.getMapControl();
        PublicMethod.maplayerOnOff(mapObj, true);
    }//GEN-LAST:event_formWindowClosing

    private void btnRefreshMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshMapActionPerformed
        targetParcelsLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnRefreshMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCheckSegments;
    private javax.swing.JButton btnCreatePolygon;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnRefreshMap;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveTextFile;
    private javax.swing.JButton btnUndoSplit;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPoints;
    // End of variables declaration//GEN-END:variables
}
