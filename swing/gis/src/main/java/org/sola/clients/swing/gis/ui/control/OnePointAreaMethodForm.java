/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sola.clients.swing.gis.ui.control;

import com.vividsolutions.jts.geom.*;
import java.lang.reflect.Method;
import java.text.DecimalFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.feature.FeatureIterator;
import org.geotools.map.extended.layer.ExtendedLayerGraphics;
import org.opengis.feature.simple.SimpleFeature;
import org.sola.clients.swing.gis.layer.CadastreTargetSegmentLayer;
import org.geotools.swing.extended.Map;
import org.geotools.swing.extended.exception.InitializeLayerException;
import org.sola.clients.swing.gis.AreaObject;
import org.sola.clients.swing.gis.Polygonization;
import org.sola.clients.swing.gis.PublicMethod;
import org.sola.clients.swing.gis.layer.CadastreChangeTargetCadastreObjectLayer;

/**
 *
 * @author Shrestha_Kabin
 */
public class OnePointAreaMethodForm extends javax.swing.JDialog {
    //Store for old data collection.
    private CadastreChangeTargetCadastreObjectLayer prevTargetParcelsLayer = null;

    private CadastreTargetSegmentLayer segmentLayer = null;
    private ExtendedLayerGraphics targetSegmentLayer = null;
    private CadastreChangeTargetCadastreObjectLayer targetParcelsLayer = null;
    //Store selected line and points.
    private LineString lineSeg = null;
    private Point pointFixed = null;

    public LocatePointPanel getLocatePointPanel() {
        return locatePointPanel;
    }

    public OnePointAreaMethodForm(
            CadastreTargetSegmentLayer segmentLayer, CadastreChangeTargetCadastreObjectLayer targetParcelsLayer)
            throws InitializeLayerException {
        
        initComponents();
        this.setAlwaysOnTop(true);
        //this.setModalityType(ModalityType.APPLICATION_MODAL);
        //this.table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        this.setSize(550, 500);
        this.setLocation(100, 100);
        
        this.segmentLayer = segmentLayer;
        this.targetSegmentLayer = segmentLayer.getSegmentLayer();
        this.targetParcelsLayer = targetParcelsLayer;

        locatePointPanel.initializeFormVariable(segmentLayer);
    }

    public final void exchangeParcelCollection(CadastreChangeTargetCadastreObjectLayer src_targetParcelsLayer
                            ,CadastreChangeTargetCadastreObjectLayer dest_targetParcelsLayer){
        dest_targetParcelsLayer.getFeatureCollection().clear();
        //get feature collection.
        SimpleFeatureCollection polys=src_targetParcelsLayer.getFeatureCollection();
        SimpleFeatureIterator polyIterator=polys.features();
        while (polyIterator.hasNext()){
            SimpleFeature fea=polyIterator.next();
            Geometry geom=(Geometry)fea.getAttribute(0);//first item as geometry.
            String objId= fea.getID().toString();
            
            dest_targetParcelsLayer.addFeature(objId, geom, null);
        }
    }
    
    private void displayArea(String parcel_id){
        DecimalFormat df = new DecimalFormat("0.00");
        for (AreaObject aa : segmentLayer.getPolyAreaList()) {
            if (parcel_id.equals(aa.getId())) {
                txtMaxArea.setText(df.format(aa.getArea()));
                break;
            }
        }
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        groupDirection = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        optClockwise = new javax.swing.JRadioButton();
        optCounterClockWise = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        txtRequiredArea = new javax.swing.JTextField();
        btnNewPacel = new javax.swing.JToggleButton();
        btnSave = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtMaxArea = new javax.swing.JTextField();
        btnUndoSplit = new javax.swing.JButton();
        locatePointPanel = new org.sola.clients.swing.gis.ui.control.LocatePointPanel();
        jLabel5 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        groupDirection.add(optClockwise);
        optClockwise.setSelected(true);
        optClockwise.setText("Clockwise Direction");

        groupDirection.add(optCounterClockWise);
        optCounterClockWise.setText("Counter-Clockwise Direction");

        jLabel7.setText("Required Area(m2):");

        btnNewPacel.setText("Create Parcel");
        btnNewPacel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPacelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");

        jLabel6.setText("Maximum Area(m2):");

        txtMaxArea.setEnabled(false);

        btnUndoSplit.setText("Undo Split");
        btnUndoSplit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoSplitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(optClockwise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(optCounterClockWise))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUndoSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNewPacel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtRequiredArea)
                    .addComponent(txtMaxArea, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtMaxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtRequiredArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNewPacel)
                            .addComponent(btnSave)
                            .addComponent(btnUndoSplit)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(optClockwise)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optCounterClockWise)))
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Area Details:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(locatePointPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)))
        );
    }// </editor-fold>//GEN-END:initComponents

    //reset the layer display.
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Make all layers off except the target layers.
        //List<Layer> lays=mapObj.getMapContent().layers();
        Map mapObj = targetSegmentLayer.getMapControl();
        PublicMethod.maplayerOnOff(mapObj, true);
    }//GEN-LAST:event_formWindowClosing

    //<<<<<<<<<<<<<<<<Section for location point based on the given area and already defined point.
    private int totalNodeCount() {
        int nodenumber = 0;
        //find the point collection
        SimpleFeatureCollection feapoints = segmentLayer.getFeatureCollection();
        FeatureIterator<SimpleFeature> ptIterator = feapoints.features();
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            byte insertednode = Byte.parseByte(fea.getAttribute(CadastreTargetSegmentLayer.LAYER_FIELD_IS_POINT_SELECTED).toString());
            if (insertednode != 2) {
                nodenumber++;
            }
        }

        return nodenumber;
    }

    private Coordinate locate_Point_Clockwise(Point[] pts, Point keyPoint, int i1, int i2) {
        List<Coordinate> pList = new ArrayList<Coordinate>();
        double areaReq = Double.parseDouble(txtRequiredArea.getText());
        boolean nextLoopAlso=true;
        //collect points for checking area.
        pList.add(keyPoint.getCoordinate());
        //Loop until the polygon formed does not have area greater than required area.
        for (int i = i2; i < pts.length; i++) {
            pList.add(pts[i].getCoordinate());
            if (checkAreaFormed(pList, areaReq)) {
                nextLoopAlso=false;
                break;
            }
        }
        
        if (nextLoopAlso){
            for (int i = 0; i <= i1; i++) {
                pList.add(pts[i].getCoordinate());
                if (checkAreaFormed(pList, areaReq)) {
                    break;
                }
            }
        }

        return point_to_form_RequiredArea(pList, areaReq);
    }

    private Coordinate midPoint_of_Given_TwoPoints(Coordinate co1, Coordinate co2) {
        Coordinate co = new Coordinate();
        co.x = (co1.x + co2.x) / 2;
        co.y = (co1.y + co2.y) / 2;

        return co;
    }

    //Bisection method to find the given area.
    private Coordinate point_to_form_RequiredArea(List<Coordinate> pts, double areaReq) {
        Coordinate midpoint = null;
        int n = pts.size() - 1;//find 0 based upperbound.
        //last two point.
        Coordinate lastPt = pts.get(n);
        Coordinate secondlastPt = pts.get(n - 1);
        //Bisection iterative method.
        midpoint = midPoint_of_Given_TwoPoints(secondlastPt, lastPt);
        pts.remove(n);
        pts.add(midpoint);
        double areaFound = AreaObject.getAreaFromCoordinateList(pts);
        DecimalFormat df = new DecimalFormat("0.000");

        while (!df.format(areaFound).equals(df.format(areaReq))) {
            if (midpoint.equals(secondlastPt) || midpoint.equals(lastPt)) {
                break;
            }
            if (areaFound < areaReq) {
                secondlastPt = midpoint;
            } else {
                lastPt = midpoint;
            }

            midpoint = midPoint_of_Given_TwoPoints(secondlastPt, lastPt);
            pts.remove(n);
            pts.add(midpoint);
            areaFound = AreaObject.getAreaFromCoordinateList(pts);
        }
        return midpoint;
    }

    private boolean checkAreaFormed(List<Coordinate> pList, double areaReq) {
        if (pList.size() > 2) {
            double areaFound = AreaObject.getAreaFromCoordinateList(pList);
            if (areaFound > areaReq) {
                return true;
            }
        }
        return false;
    }

    private Coordinate locate_Point_counterClockwise(Point[] pts, Point keyPoint, int i1, int i2) {
        List<Coordinate> pList = new ArrayList<Coordinate>();
        double areaReq = Double.parseDouble(txtRequiredArea.getText());
        boolean nextLoopAlso=true;
        //collect points for checking area.
        pList.add(keyPoint.getCoordinate());
        for (int i = i1; i >= 0; i--) {
            pList.add(pts[i].getCoordinate());
            if (checkAreaFormed(pList, areaReq)) {
                nextLoopAlso=false;
                break;
            }
        }
        
        if (nextLoopAlso){
            for (int i = pts.length - 1; i >= i2; i--) {
                pList.add(pts[i].getCoordinate());
                if (checkAreaFormed(pList, areaReq)) {
                    break;
                }
            }
        }

        return point_to_form_RequiredArea(pList, areaReq);
    }

    private void createNewSegment(Point[] pts, Point keyPoint, int i1, int i2) {
        Coordinate newCo = null;
        //Traverse based on the direction given.
        if (optClockwise.isSelected()) {
            newCo = locate_Point_Clockwise(pts, keyPoint, i1, i2);
        } else {
            newCo = locate_Point_counterClockwise(pts, keyPoint, i1, i2);
        }
        if (newCo == null) {
            return;
        }
        //Form new segment with the coordinate founds.
        GeometryFactory geomFactory = new GeometryFactory();
        Coordinate[] co = new Coordinate[]{keyPoint.getCoordinate(), newCo};
        LineString newSegment = geomFactory.createLineString(co);
        Point newPoint = geomFactory.createPoint(newCo);
        //append new geometry formed in their respective collection.
        locatePointPanel.addPointInPointCollection(newPoint);
        locatePointPanel.appendNewSegment(newSegment);
        //Key points has been already handled by locate Point Panel.
        //break segment containing the new points.
        breakSegment(newPoint);
    }

    private void breakSegment(Point pt) {
        //get features.
        SimpleFeatureCollection feacol = targetSegmentLayer.getFeatureCollection();
        FeatureIterator<SimpleFeature> feaIterator = feacol.features();
        //check the features.
        while (feaIterator.hasNext()) {
            SimpleFeature fea = feaIterator.next();
            String objId = fea.getID();
            LineString geom = (LineString) fea.getAttribute(0);//First attribute element for geometry value.
            if (IsPointOnLine(geom, pt)) {
                locatePointPanel.breakSegmentAtPoint(geom, pt,objId);
                //finally remove the orignal segment.
                targetSegmentLayer.removeFeature(objId);
                break;
            }
        }
    }

    //Sum of partial distances are equal to the total segment length, then 
    //the point lies on the given line.
    private boolean IsPointOnLine(LineString seg, Point pt) {
        double segLength = seg.getLength();
        double dist1 = Distance(seg.getStartPoint().getCoordinate(), pt.getCoordinate());
        double dist2 = Distance(pt.getCoordinate(), seg.getEndPoint().getCoordinate());

        DecimalFormat df = new DecimalFormat("0.000");
        //Avoid the point coincidence at end of the line.
        if (df.format(segLength).equals(df.format(dist1))) {
            return false;
        }
        if (df.format(segLength).equals(df.format(dist2))) {
            return false;
        }
        //check if the point lies within line segment.
        double totaldist = dist1 + dist2;
        if (df.format(segLength).equals(df.format(totaldist))) {
            return true;
        } else {
            return false;
        }
    }

    private double Distance(Coordinate co1, Coordinate co2) {
        double distSquare = Math.pow((co1.x - co2.x), 2);
        distSquare += Math.pow((co1.y - co2.y), 2);
        return Math.pow(distSquare, 0.5);
    }
    //End of the section for finding the specified area>>>>>>>>>>>>>>>>>>>>

    private void btnNewPacelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPacelActionPerformed
        //Validate the area entered.
        if (pointFixed==null || lineSeg==null) return;
        double areaReq = Double.parseDouble(txtRequiredArea.getText());
        if (areaReq <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Area cannot be less than or equal to zero. Check it.");
            return;
        }
        double maxArea = Double.parseDouble(txtMaxArea.getText());
        if (areaReq >= maxArea) {
            JOptionPane.showMessageDialog(rootPane, "Area cannot be more than or equal to given maximum area. Check it.");
            return;
        }
        //process points.
        Point[] pts = new Point[totalNodeCount()];
        Point keyPoint = null;
        //find the point collection
        SimpleFeatureCollection feapoints = segmentLayer.getFeatureCollection();
        FeatureIterator<SimpleFeature> ptIterator = feapoints.features();
        int i = 0;
        int i1 = 0;
        int i2 = 0;
        //Storing points and key indices for area iteration.
        while (ptIterator.hasNext()) {
            SimpleFeature fea = ptIterator.next();
            byte insertednode = Byte.parseByte(fea.getAttribute(CadastreTargetSegmentLayer.LAYER_FIELD_IS_POINT_SELECTED).toString());
            Point pt = (Point) fea.getAttribute(0);//First attribute as geometry attribute.
            //store point.
            if (insertednode != 2) {
                if (pt.equals(lineSeg.getStartPoint())) {
                    i1 = i;//initial index.
                }
                if (pt.equals(lineSeg.getEndPoint())) {
                    i2 = i;//end index.
                }
                pts[i++] = pt;
            }
        }
        keyPoint=pointFixed;
        
        createNewSegment(pts, keyPoint, i1, i2);
        locatePointPanel.showSegmentListInTable();
        Polygonization.formPolygon(segmentLayer, targetParcelsLayer);
        segmentLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnNewPacelActionPerformed

    //Invokes this method by btnAddPointActionPerformed event of LocatePointPanel.
    public void refreshTable(Object lineSeg,Object pointFixed,String parID ){
        this.lineSeg=(LineString)lineSeg;
        this.pointFixed=(Point)pointFixed;
        
        displayArea(parID);
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            //Store data for undo action.
            locatePointPanel.resetVariable(segmentLayer);
            //store data to old collection.
            prevTargetParcelsLayer= new CadastreChangeTargetCadastreObjectLayer();
            exchangeParcelCollection(targetParcelsLayer,prevTargetParcelsLayer);
        } catch (InitializeLayerException ex) {
            Logger.getLogger(OnePointAreaMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Event delegate passing to the child JPanel.
        Class[] cls=new Class[]{Object.class,Object.class,String.class};
        Class workingForm=this.getClass();
        Method refresh_this=null;
        try {
            refresh_this = workingForm.getMethod("refreshTable", cls);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(JoinPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            Logger.getLogger(JoinPointMethodForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        locatePointPanel.setClickEvnt(refresh_this,this);
    }//GEN-LAST:event_formWindowOpened

    private void btnUndoSplitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoSplitActionPerformed
        locatePointPanel.getPreviousData();
        //copy data from old collection to current collection.
        exchangeParcelCollection(prevTargetParcelsLayer, targetParcelsLayer);
        
        targetParcelsLayer.getMapControl().refresh();
    }//GEN-LAST:event_btnUndoSplitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnNewPacel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUndoSplit;
    private javax.swing.ButtonGroup groupDirection;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private org.sola.clients.swing.gis.ui.control.LocatePointPanel locatePointPanel;
    private javax.swing.JRadioButton optClockwise;
    private javax.swing.JRadioButton optCounterClockWise;
    private javax.swing.JTextField txtMaxArea;
    private javax.swing.JTextField txtRequiredArea;
    // End of variables declaration//GEN-END:variables
}
